BLOG PUBLIC API DOCUMENTATION
=====================================

This document contains API endpoints for the public blog website frontend.
These APIs are read-only and designed for displaying blog content to visitors.

BASE INFORMATION
================
Base URL: https://backend-production-92ae.up.railway.app
API Prefix: /api/
Content Type: application/json
Authentication: Not required for public endpoints

BLOG POSTS API
==============

1. GET ALL BLOG POSTS (with pagination and search)
   Endpoint: GET /api/posts/
   
   Query Parameters:
   - search: Search across title, content, and slug (e.g., ?search=javascript)
   - published: Filter published posts (use ?published=true for public site)
   - page: Page number (default: 1)
   - limit: Posts per page (default: 9, max: 50)
   
   Example Request:
   GET https://backend-production-92ae.up.railway.app/api/posts/?published=true&page=1&limit=9
   
   Response Format:
   {
     "count": 25,
     "next": "https://backend-production-92ae.up.railway.app/api/posts/?page=2",
     "previous": null,
     "total_pages": 3,
     "current_page": 1,
     "page_size": 9,
     "results": [
       {
         "id": 1,
         "title": "Getting Started with React",
         "slug": "getting-started-with-react",
         "excerpt": "Learn the basics of React development...",
         "read_time": 5,
         "published": true,
         "category": {
           "id": 1,
           "name": "React",
           "slug": "react",
           "color": "#61dafb"
         },
         "images": [
           {
             "id": 1,
             "image": "/media/blog_images/react-intro.jpg",
             "alt_text": "React logo"
           }
         ],
         "created_at": "2024-01-15T10:30:00Z",
         "updated_at": "2024-01-15T10:30:00Z"
       }
     ]
   }

2. GET SINGLE BLOG POST BY SLUG
   Endpoint: GET /api/posts/{slug}/
   
   Example Request:
   GET https://backend-production-92ae.up.railway.app/api/posts/getting-started-with-react/
   
   Response Format:
   {
     "id": 1,
     "title": "Getting Started with React",
     "slug": "getting-started-with-react",
     "content": "<p>Full HTML content of the blog post...</p>",
     "excerpt": "Learn the basics of React development...",
     "read_time": 5,
     "published": true,
     "category": {
       "id": 1,
       "name": "React",
       "slug": "react",
       "color": "#61dafb",
       "description": "React framework tutorials"
     },
     "images": [
       {
         "id": 1,
         "image": "/media/blog_images/react-intro.jpg",
         "alt_text": "React logo"
       }
     ],
     "created_at": "2024-01-15T10:30:00Z",
     "updated_at": "2024-01-15T10:30:00Z"
   }

3. GET RELATED POSTS
   Endpoint: GET /api/posts/{slug}/related/
   
   Query Parameters:
   - limit: Number of related posts (default: 4, max: 10)
   
   Example Request:
   GET https://backend-production-92ae.up.railway.app/api/posts/getting-started-with-react/related/?limit=4
   
   Response Format:
   {
     "count": 4,
     "results": [
       {
         "id": 2,
         "title": "Advanced React Hooks",
         "slug": "advanced-react-hooks",
         "excerpt": "Deep dive into React hooks...",
         "read_time": 8,
         "category": {
           "id": 1,
           "name": "React",
           "slug": "react",
           "color": "#61dafb"
         },
         "images": [...],
         "created_at": "2024-01-20T14:15:00Z"
       }
     ]
   }

CATEGORIES API
==============

1. GET ALL CATEGORIES
   Endpoint: GET /api/categories/
   
   Example Request:
   GET https://backend-production-92ae.up.railway.app/api/categories/
   
   Response Format:
   [
     {
       "id": 1,
       "name": "React",
       "slug": "react",
       "description": "React framework tutorials and tips",
       "color": "#61dafb",
       "post_count": 12,
       "created_at": "2024-01-01T00:00:00Z",
       "updated_at": "2024-01-01T00:00:00Z"
     },
     {
       "id": 2,
       "name": "JavaScript",
       "slug": "javascript",
       "description": "JavaScript programming guides",
       "color": "#f7df1e",
       "post_count": 8,
       "created_at": "2024-01-01T00:00:00Z",
       "updated_at": "2024-01-01T00:00:00Z"
     }
   ]

2. GET SINGLE CATEGORY
   Endpoint: GET /api/categories/{slug}/
   
   Example Request:
   GET https://backend-production-92ae.up.railway.app/api/categories/react/
   
   Response Format:
   {
     "id": 1,
     "name": "React",
     "slug": "react",
     "description": "React framework tutorials and tips",
     "color": "#61dafb",
     "post_count": 12,
     "created_at": "2024-01-01T00:00:00Z",
     "updated_at": "2024-01-01T00:00:00Z"
   }

COMMENTS API (PUBLIC READ/WRITE)
===============================

1. GET COMMENTS FOR A POST
   Endpoint: GET /api/comments/
   
   Query Parameters:
   - post: Post ID (required)
   - approved: Filter approved comments (use ?approved=true for public)
   
   Example Request:
   GET https://backend-production-92ae.up.railway.app/api/comments/?post=1&approved=true
   
   Response Format:
   [
     {
       "id": 1,
       "post": 1,
       "parent": null,
       "name": "John Doe",
       "email": "john@example.com",
       "content": "Great article! Very helpful.",
       "approved": true,
       "created_at": "2024-01-16T09:45:00Z"
     },
     {
       "id": 2,
       "post": 1,
       "parent": 1,
       "name": "Jane Smith",
       "email": "jane@example.com",
       "content": "I agree with John, excellent content!",
       "approved": true,
       "created_at": "2024-01-16T11:20:00Z"
     }
   ]

2. CREATE NEW COMMENT
   Endpoint: POST /api/comments/
   
   Request Body:
   {
     "post": 1,
     "name": "John Doe",
     "email": "john@example.com",
     "content": "This is my comment on the blog post.",
     "parent": null
   }
   
   Response Format:
   {
     "id": 3,
     "post": 1,
     "parent": null,
     "name": "John Doe",
     "email": "john@example.com",
     "content": "This is my comment on the blog post.",
     "approved": false,
     "created_at": "2024-01-16T15:30:00Z"
   }
   
   Note: New comments are set to approved=false by default and require admin approval.

3. REPLY TO A COMMENT
   Endpoint: POST /api/comments/
   
   Request Body:
   {
     "post": 1,
     "parent": 1,
     "name": "Jane Smith",
     "email": "jane@example.com",
     "content": "This is a reply to the first comment."
   }

MEDIA FILES
===========

Images and media files are served from:
/media/blog_images/filename.jpg

Example image URL:
https://backend-production-92ae.up.railway.app/media/blog_images/react-intro.jpg

COMMON USAGE PATTERNS
=====================

1. BLOG LIST PAGE:
   - Fetch posts: GET https://backend-production-92ae.up.railway.app/api/posts/?published=true&page=1&limit=9
   - Fetch categories: GET https://backend-production-92ae.up.railway.app/api/categories/
   - Filter by category: GET https://backend-production-92ae.up.railway.app/api/posts/?published=true&category=react

2. BLOG DETAIL PAGE:
   - Fetch post: GET https://backend-production-92ae.up.railway.app/api/posts/post-slug/
   - Fetch comments: GET https://backend-production-92ae.up.railway.app/api/comments/?post=1&approved=true
   - Fetch related posts: GET https://backend-production-92ae.up.railway.app/api/posts/post-slug/related/?limit=4

3. SEARCH FUNCTIONALITY:
   - Search posts: GET https://backend-production-92ae.up.railway.app/api/posts/?published=true&search=javascript

4. COMMENT SUBMISSION:
   - Submit comment: POST /api/comments/ with form data
   - Show success message (comment pending approval)

ERROR HANDLING
==============

All endpoints return standard HTTP status codes:
- 200: Success
- 400: Bad Request (validation errors)
- 404: Not Found
- 500: Server Error

Error Response Format:
{
  "detail": "Error message description"
}

Or for validation errors:
{
  "field_name": ["Field-specific error message"]
}

IMPORTANT NOTES
===============

1. Always filter posts with ?published=true for public display
2. Only show approved comments (?approved=true)
3. New comments require admin approval before appearing
4. Images are served from the /media/ path
5. Use slugs instead of IDs in URLs for SEO
6. Implement proper loading states and error handling
7. Category colors can be used for UI theming
8. Read time is calculated automatically by the backend

EXAMPLE FRONTEND INTEGRATION
============================

// Fetch blog posts
const fetchPosts = async (page = 1, search = '') => {
  const baseUrl = 'https://backend-production-92ae.up.railway.app';
  const url = `${baseUrl}/api/posts/?published=true&page=${page}&limit=9${search ? `&search=${search}` : ''}`;
  const response = await fetch(url);
  return response.json();
};

// Fetch single post
const fetchPost = async (slug) => {
  const baseUrl = 'https://backend-production-92ae.up.railway.app';
  const response = await fetch(`${baseUrl}/api/posts/${slug}/`);
  return response.json();
};

// Fetch categories
const fetchCategories = async () => {
  const baseUrl = 'https://backend-production-92ae.up.railway.app';
  const response = await fetch(`${baseUrl}/api/categories/`);
  return response.json();
};

// Submit comment
const submitComment = async (commentData) => {
  const baseUrl = 'https://backend-production-92ae.up.railway.app';
  const response = await fetch(`${baseUrl}/api/comments/`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(commentData)
  });
  return response.json();
};

This API documentation covers all the endpoints needed for a complete public blog website.